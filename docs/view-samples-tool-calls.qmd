---
title: "Samples Tool Calls"
reference: "inspect_viz.view.beta"
filters:
   - at: pre-ast
     type: json
     path: reference/filter/filter.py
   - at: pre-ast
     path: reference/filter/post.lua
---

## Overview

The `samples_tool_calls()` function creates a heat map visualising tool calls over evaluation turns.

```{python}
from inspect_viz import Data
from inspect_viz.view.beta import samples_tool_calls

tools = Data.from_file("cybench_tools.parquet")
samples_tool_calls(tools)
```


## Data Preparation

To create the plot we read a raw messages data frame from an eval log using the [`messages_df()`](https://inspect.aisi.org.uk/reference/inspect_ai.analysis.html#messages_df) function, then filter down to just the fields we require for visualization:

```{python}
#| eval: false
from inspect_ai.analysis import messages_df, log_viewer, model_info, prepare, EvalModel, MessageColumns, SampleSummary


# read messages from log
log = "<path-to-log>.eval"

# Be sure to add EvalModel column so links can be prepared
df = messages_df(log, columns=EvalModel + SampleSummary + MessageColumns)

# trim columns
df = df[[
    "eval_id",
    "sample_id",
    "message_id",
    "model",
    "id",
    "order",
    "tool_call_function",
    "limit",
    "log"
]]

# prepare the data frame with model info and log links
df = prepare(df, [
    model_info(),
    log_viewer("message", url_mappings={
      "logs": "https://samples.meridianlabs.ai/"  
    })
])

# write to parquet
df.to_parquet("cybench_tools.parquet")
```

Note that the trimming of columns is particularly important because Inspect Viz embeds datasets directly in the web pages that host them (so we want to minimize their size for page load performance and bandwidth usage).

## Function Reference {reference="samples_tool_calls"}

## Implementation

The [Samples Tool Calls](examples/inspect/samples-tool-calls/index.qmd) example demonstrates how this view was implemented using lower level plotting components.
