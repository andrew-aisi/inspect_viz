---
title: "Tool Usage"
subtitle: "Dataset: [cybench_tools.parquet](cybench_tools.parquet)"
---

In this example we visualize tool usage over a series of turns in a Cybench evaluation. We use a `cell()` mark to visualize tool use over messages in each sample of an evaluation. We note any limit that ended the sample using a `text()` mark on the right side of the frame.

```{python}
#| filename: Code

from inspect_viz import Data
from inspect_viz.plot import plot, legend
from inspect_viz.mark import cell, text

# read data (see 'Data Preparation' below)
tools = Data.from_file("cybench_tools.parquet") # <1>

tools_domain = ["bash", "python", "submit", "(none)"]

plot(
    cell( # <2>
        tools,
        x="order",
        y="id",
        fill="tool_call_function"
    ), # <2>
    
    text( # <3>
        tools, 
        text="limit", 
        y="id",
        frame_anchor="right", 
        font_size=8, 
        font_weight=200,
        dx=50
    ),  # <3>
    legend=legend("color", location="right"),
    margin_top=0,   # <4>
    margin_left=20,
    margin_right=100,  # <4>
    x_ticks=list(range(0, 400, 50)), # <5>
    y_ticks=[], # <5>
    x_label="Message", # <6>
    y_label="Sample",  # <6>
    color_label="Tool",  # <6>
    color_domain=tools_domain  # <6>
)
```

1. Read tool call data (see [Data Preparation](#data-preparation) for details).

2. `cell()` mark showing tool calls.

3. `text()` mark showing whether the sample terminated due to a limit.

4. Tweak the margins so the axis labels and text annotations appear correctly.

5. Reduce the number of tick marks on the x-axis and eliminate y-ticks.

6. Set some custom labels and ensure that tools follow our designed order.

### Data Preparation {.unlisted}

To create the plot we read a raw messages data frame from an eval log^[The eval log read for this example is in the [inspect-viz-example-logs](https://github.com/meridianlabs-ai/inspect-viz-example-logs/blob/main/logs/cybench/2025-06-28T12-26-01%2B00-00_cybench_cHgZahEpPHqsSx8GfGjKai.eval) repo], fill the tool call field with "(none)" if there are no tool calls, then filter down to just the fields we require for visualization:

<!-- ~/meridianlabs/inspect-viz-example-logs/logs/cybench/2025-06-28T12-26-01+00-00_cybench_cHgZahEpPHqsSx8GfGjKai.eval -->

```{python}
#| eval: false
from inspect_ai.analysis.beta import messages_df, MessageColumns, SampleSummary

# read messages from log
log = "<path-to-log>.eval"
df = messages_df(log, columns=SampleSummary + MessageColumns)

# mark messages with no tool calls
df.loc[df["tool_call_function"].isna(), "tool_call_function"] = "(none)"

# trim columns
tools_df = df[[
    "eval_id",
    "id",
    "order",
    "tool_call_function",
    "limit"
]]
```

Note that the trimming of columns is particularly important because Inspect Viz embeds datasets directly in the web pages that host them (so we want to minimize their size for page load performance and bandwidth usage).

