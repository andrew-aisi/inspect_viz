---
title: Scores by Task
subtitle: "Dataset: [evals.parquet](evals.parquet)"
---

This example illustrates the code behind the 
This example illustrates the code behind the [`scores_by_task()`](../../../reference/inspect_viz.view.qmd#scores_by_task) pre-built view function. If you want to include this plot in your notebooks or websites you should start with that function rather than the lower-level code below.

Here is the base bar plot with data read using the [`evals_df()`](https://inspect.aisi.org.uk/reference/inspect_ai.analysis.html#evals_df) function (and amended with [links](../../../components-links.qmd)) to the published logs):

```{python}
#| filename: Code

from inspect_viz import Data
from inspect_viz.plot import plot, legend
from inspect_viz.mark import bar_y, TipOptions
from inspect_viz.transform import sql

evals = Data.from_file("evals.parquet")

plot(
    bar_y( 
        evals, 
        x="model", 
        fx="task_name", # <1>
        y="score_headline_value",
        channels= { "Log Viewer": "log_viewer" }, # <2>
        fill="model",
        tip=True
    ),
    legend=legend("color", location="bottom"),
    x_label=None, fx_label=None, x_ticks=[],  # <3> 
    y_label="score", y_domain=[0, 1.0], # <4>
    color_label="Model"
)
```

1.  Facet the x-axis (i.e. create multiple groups of bars) by task name.

2.  Add a channel with links to the Inspect log files (links appear in the tooltip).

3.  We don't need an explicit "model" or "task_name" label as they are obvious from context. We also don't need ticks b/c the fill color and legend provide this.

4.  Ensure that y-axis shows the full range of scores (by default it caps at the maximum).

#### Confidence Interval

Here we add a confidence interval for each reported score by adding a `rule_x()` mark. Note that we compute the confidence interval range dynamically using a `sql()` transform:

```{python}
#| filename: Code

from inspect_viz.mark import rule_x
from inspect_viz.transform import sql, ci_bounds

# confidence interval bounds  # <1>
ci_lower, ci_upper = ci_bounds(
    0.95, 
    score="score_headline_value", 
    stderr="score_headline_stderr"
) # <1>

plot(
    bar_y( 
        evals, x="model", fx="task_name", 
        y="score_headline_value",
        channels= { "Log Viewer": "log_viewer" },
        fill="model",
        tip=True
    ),
    rule_x(  # <2>
        evals,
        x="model",
        fx="task_name",
        y1=ci_lower,
        y2=ci_upper,
        stroke="black",
        marker="tick-x",
    ),  # <2>
    legend=legend("color", location="bottom"),
    x_label=None, fx_label=None, x_ticks=[],
    y_label="score", y_domain=[0, 1.0],
    color_label="Model"
)
```

1.  Use the `ci_bounds()` bounds function to create transforms that we will pass for `y1` and `y2`.

2.  Draw the confidence interval using a `rule_x()` mark.