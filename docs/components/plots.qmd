---
title: "Plots"
---

## Basics

A `plot()` produces a single visualization as a Web element. A plot is defined as a list of directives defining [marks](marks.qmd), [interactors](../reference/inspect_viz.interactor.qmd), [legends](#legends), and [attributes](reference/inspect_viz.plot.qmd#plotattributes),

Similar to other grammars of graphics, a `plot` consists of _marks_---graphical primitives such as bars, areas, and lines---which serve as chart layers. Plots use the semantics of [Observable Plot](https://observablehq.com/plot/what-is-plot), such that each `plot` has a dedicated set of encoding _channels_ with named _scale_ mappings such as `x`, `y`, `color`, `opacity`, etc.

Plots support faceting of the `x` and `y` dimensions, producing associated `fx` and `fy` scales.
Plots are rendered to SVG output using Observable Plot.

Here is a simple dot plot that demonstrates some key concepts:

```{python}
#| include: false

from inspect_viz.plot import plot_defaults
plot_defaults(
    width=700, height=400
)

```

```{python}
from inspect_viz import Data
from inspect_viz.plot import plot
from inspect_viz.mark import dot

penguins = Data.from_file("penguins.parquet")

plot(
    dot(penguins, x="body_mass", y="flipper_length",  # <1>
        stroke="species", symbol="species"),   # <1>
    legend="symbol",  # <2>
    grid=True,  # <3>
    width=700,  # <3>
    height=400  # <3>
)
```


1. `dot()` mark for a simple dot plot, using a distinct `stroke` and `symbol` to denote the "species" column.

2. Legend in the default location, keyed by `symbol`.

3. Additional attributes that affect plot size and appearance.


## Facets

Plots support faceting of the `x` and `y` dimensions, producing associated `fx` and `fy` scales. For example, here we comopare model performance on several tasks. The `task_name` is the `fx` scale, resulting in a separate grouping of bars for each task:

```{python}
from inspect_viz import Data
from inspect_viz.plot import plot, legend
from inspect_viz.mark import bar_y

evals = Data.from_file("evals.parquet")

plot(
    bar_y( 
        evals, x="model", fx="task_name",  # <1>
        y="score_headline_value",
        fill="model",
    ),
    legend=legend("color", location="bottom"),
    x_label=None, x_ticks=[], fx_label=None,
    y_label="score", y_domain=[0, 1.0]
)

```




- marks

- titles

- legend

- options

- 

