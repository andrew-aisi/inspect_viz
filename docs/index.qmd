---
title: "Inspect Viz"
subtitle: |
   Data visualization for [Inspect AI](https://inspect.aisi.org.uk/) large language model evalutions.
tbl-colwidths: [35,75]
---

```{python}
#| echo: false
from inspect_viz.plot import plot_defaults
plot_defaults(
    width=800,
    height=500
)
```

## Welcome

Welcome to Inspect Viz, a data visualisation library for [Inspect AI](https://inspect.aisi.org.uk/). Inspect Viz provides flexible tools for creating high quality interactive visualisations from Inspect evaluations.

Here's an Inspect Viz plot created with the [`scores_timeline()`](view-scores-timeline.qmd) function that compares benchmarks scores over time[^1]:

[^1]: This plot was inspired by and includes data from the [Epoch AI](https://epoch.ai/data/ai-benchmarking-dashboard) Benchmarking Hub

```{python}
#| echo: false
#| 
from inspect_viz import Data
from inspect_viz.view.beta import scores_timeline

evals = Data.from_file("benchmarks.parquet")
scores_timeline(evals)
```

Use the filters to switch benchmarks and restrict to models from various organization(s). Hover over the points to get additional details on them or view the underlying Inspect log for the evals.

## Installation

First, install the `inspect_viz` package from GitHub as follows:

``` bash
pip install git+https://github.com/meridianlabs-ai/inspect_viz
```

Inspect Viz plots are interactive Jupyter Widgets and can be authored in variety of ways:

1. In any [Jupyter Notebook](https://jupyter.org/) (JupyterLab, VS Code, Colab, etc.)

2. In VS Code with the **Jupyter: Run Current File in Interactive Window** command.

3. In VS Code within a [Quarto](https://quarto.org) executable markdown document.

See the article on [LLM Assistance](llm-assistance.qmd) for best practices on using language models to help with creating plots. See the articles on [Publishing](publishing.qmd) for details on including plots in documents as static images or within websites and dashboards as interactive widgets.

## Views

Inspect Viz [Views](views.qmd) are pre-built plots that work with data created by the Inspect log [data frame](https://inspect.aisi.org.uk/dataframe.html) reading functions. For example, the [`scores_by_factor()`](view-scores-by-factor.qmd) view enables you to compare scores across models and a boolean factor:

```{python}
from inspect_viz import Data
from inspect_viz.view.beta import scores_by_factor

evals = Data.from_file("evals-hint.parquet")
scores_by_factor(evals, "task_arg_hint", ("No hint", "Hint"))
```

The [`tool_calls()`](view-tool-calls.qmd) view enables you to visualize tool calls by sample:

```{python}
from inspect_viz.view.beta import tool_calls

tools = Data.from_file("cybench_tools.parquet")
tool_calls(tools)
```

Available views include:

{{< include _views.md >}}

## Plots

While pre-built views are useful, you also may want to create your own custom plots. Plots in `inspect_viz` are composed of one or more [marks](reference/inspect_viz.mark.qmd), which can do either higher level plotting (e.g. `dot()`, `bar_x()`, `bar_y()`, `area()`, `heatmap()`, etc.) or lower level drawing on the plot canvas (e.g. `text()`, `image()`, `arrow()`, etc.)

### Dot Plot

Here is an example of a simple dot plot using the [Palmer Penguins](https://huggingface.co/datasets/SIH/palmer-penguins) dataset:

```{python}
from inspect_viz import Data
from inspect_viz.plot import plot
from inspect_viz.mark import dot

penguins = Data.from_file("penguins.parquet") # <1>

plot(
    dot(
        penguins, 
        x="body_mass", y="flipper_length",  # <2> 
        stroke="species", symbol="species"  # <3> 
    ),
    grid=True,
    legend="symbol" # <4>
)
```

1.  Read the dataset from a parquet file. You can can also use `Data.from_dataframe()` to read data from any Pandas, Polars, or PyArrow data frame.

2.  Plot using a `dot()` mark. The `plot()` function takes one or more marks or interactors.

3.  Map the "species" column to the `stroke` and `symbol` scales of the plot (causing each species to have its own color and symbol).

4.  Add a `legend` to the plot as a key to our scale mappings.

### Bar Plot

Here is a simple horizontal bar plot that counts the number of each species:

```{python}
from inspect_viz.mark import bar_x
from inspect_viz.transform import count

plot(
    bar_x(penguins, x=count(), y="species", fill="species"),
    y_label=None,
    height=200,
    margin_left=60
)
```

The `x` axis for this plot is not mapped to a column, but rather to a `count()` transform ( [transforms](reference/inspect_viz.transform.qmd) enable you to perform computations on columns for plotting). The `fill` option gives each species it's own color. We also specify that we don't want a `y_label` (as the species names serve that purpose) and a smaller than normal height.

{{< include _observable-tip.md >}}

## Links

Inspect Viz supports creating direct links from visualizations to published Inspect log transcripts. Links can be made at the eval level, or to individual samples, messages, or events. For example, this plot produced with `scores_by_model()` includes a link to the underlying logs in its tooltips:

```{python}
#| include: false
evals = Data.from_file("agi-lsat-ar.parquet")
```

```{python}
from inspect_viz.view.beta import scores_by_model
scores_by_model(evals) # baseline=0.91
```

The pre-built [Views](views.qmd) all support linking when a `log_viewer` column is available in the dataset. To learn more about ammending datasets with viewer URLs as well as adding linking support to your own plots see the article on [Links](components-links.qmd).

## Filters

Use [inputs](reference/inspect_viz.input.qmd) to enable filtering datasets and dynamically updating plots. For example, here we add a `select()` input that filters on the `species` column:

```{python}
#| classes: svg-spacing
from inspect_viz.input import select
from inspect_viz.layout import vconcat

vconcat(
   select(penguins, label="Species", column="species"),
   plot(
      dot(penguins, x="body_mass", y="flipper_length",  
          stroke="species", symbol="species"),
      legend="symbol",
      color_domain="fixed"
   )
)
```

We've introduced a few new things here:

1.  The `vconcat()` function from the [layout](reference/inspect_viz.layout.qmd) module lets us stack inputs on top of our plot.

2.  The `select()` function from the [input](reference/inspect_viz.input.qmd) module binds a select box to the `species` column.

3.  The `color_domain="fixed"` argument to `plot()` indicates that we want to preserve species colors even when the plot is filtered.

## Marks

So far the plots we've created include only a single [mark](reference/inspect_viz.mark.qmd), however many of the more interesting plots you'll create will include multiple marks.

For example, here we explore the relationships between the height, weight, and sex of olympic athletes using `dot()` and `regression_y()` marks:

```{python}
from inspect_viz.mark import regression_y

athletes = Data.from_file("athletes.parquet")

plot(
    dot(athletes, x="weight", y="height", fill="sex", opacity=0.1),
    regression_y(athletes, x="weight", y="height", stroke="sex"),
    legend="color"
)
```

Note that we set the `opacity` of the dot mark to 0.1 to help mitigate oversaturation that results from large numbers of data points being stacked on top of eachother.

Marks can also be used to draw lines, arrows, text, or images on a plot.

{{< include _data.md >}}


## Tables

You can also display data in a tabular layout using the `table()` function:

```{python}
from inspect_viz.table import table

table(penguins)
```

You can sort and filter tables by column, use a scrolling or paginated display, and customize several other aspects of table appearance and behavior.


## Learning More

Use these resources to learn more about using Inspect Viz:

-   [Views](views.qmd) describes the various available pre-built views and how to customize them.

-   [Components](components-plots.qmd) goes into further depth on the main concepts and components of the library.

-   [Publishing](publishing.qmd) covers publishing Inspect Viz content as standalone plots, notebooks, websites, and dashboards.

-   [Reference](reference/index.qmd) provides details on the available marks, interactors, transforms, and inputs.

-   [Examples](examples/index.qmd) demonstrates more advanced plotting and interactivity features.